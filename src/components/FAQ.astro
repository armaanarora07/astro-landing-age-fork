---
import { ChevronDown } from 'lucide-astro';
---

<section id="faq" class="py-24 px-6 bg-gradient-to-b from-white to-gray-50 dark:from-gray-900 dark:to-gray-800 transition-colors duration-300">
  <div class="max-w-4xl mx-auto">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-500 to-blue-700 dark:from-blue-400 dark:to-blue-600 text-transparent bg-clip-text mb-4">
        Frequently Asked Questions
      </h2>
      <p class="text-xl text-gray-600 dark:text-gray-300">
        Everything you need to know about our AI chat platform
      </p>
    </div>

    <div class="space-y-6">
      {[
        {
          question: "How does the AI chat work?",
          answer: "Our AI chat platform uses advanced language models to understand and respond to your messages naturally. It learns from context and can handle a wide range of topics and queries with high accuracy."
        },
        {
          question: "Is my data secure?",
          answer: "Yes, we take security seriously. All conversations are encrypted end-to-end, and we follow strict data protection protocols. We never share your data with third parties without your explicit consent."
        },
        {
          question: "Can I customize the AI's responses?",
          answer: "Yes, enterprise users can customize the AI's responses and train it on specific data sets. This allows you to tailor the chat experience to your specific needs and industry requirements."
        },
        {
          question: "What kind of support do you offer?",
          answer: "We offer different levels of support based on your plan. Basic users get email support, Pro users receive priority support, and Enterprise customers get 24/7 dedicated support with SLA guarantees."
        }
      ].map((faq) => (
        <div class="faq-item bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden transition-all duration-200 hover:shadow-md">
          <button 
            type="button" 
            class="w-full flex items-center justify-between p-6 text-left group"
            aria-expanded="false"
          >
            <span class="text-lg font-semibold text-gray-900 dark:text-white group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-colors">{faq.question}</span>
            <ChevronDown className="w-5 h-5 text-blue-500 dark:text-blue-400 transition-transform duration-200" />
          </button>
          <div class="faq-content hidden">
            <div class="px-6 pb-6 text-gray-600 dark:text-gray-300">
              {faq.answer}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  function setupFAQ() {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
      const button = item.querySelector('button');
      const clone = button?.cloneNode(true);
      if (button && clone) {
        button.parentNode?.replaceChild(clone, button);
      }
    });

    faqItems.forEach(item => {
      const button = item.querySelector('button');
      const content = item.querySelector('.faq-content');
      const icon = button?.querySelector('svg');
      
      if (button && content && icon) {
        button.addEventListener('click', () => {
          const isExpanded = button.getAttribute('aria-expanded') === 'true';
          button.setAttribute('aria-expanded', (!isExpanded).toString());
          
          faqItems.forEach(otherItem => {
            if (otherItem !== item) {
              const otherContent = otherItem.querySelector('.faq-content');
              const otherButton = otherItem.querySelector('button');
              const otherIcon = otherItem.querySelector('svg');
              
              if (otherContent && otherButton && otherIcon) {
                otherContent.classList.add('hidden');
                otherButton.setAttribute('aria-expanded', 'false');
                (otherIcon as unknown as SVGElement).style.transform = 'rotate(0deg)';
              }
            }
          });
          
          if (isExpanded) {
            content.classList.add('hidden');
            (icon as unknown as SVGElement).style.transform = 'rotate(0deg)';
          } else {
            content.classList.remove('hidden');
            (icon as unknown as SVGElement).style.transform = 'rotate(180deg)';
          }
        });
      }
    });
  }

  setupFAQ();
  document.addEventListener('astro:page-load', setupFAQ);
</script> 